rule all:
  input:
    "results/zscored_trace.txt",
    "results/model_accuracy.txt",
    "results/model_precision.txt"

rule generate_data:
  output:
    "data/raw_trace.txt"
  conda:
    "envs/numpy.yaml"
  shell:
    """
    mkdir -p data
    python -c \"import numpy as np; np.savetxt('data/raw_trace.txt', np.random.randn(100))\"
    """

rule preprocess:
  input:
    "data/raw_trace.txt"
  output:
    "results/zscored_trace.txt"
  conda:
    "envs/numpy.yaml"
  shell:
    """
    mkdir -p results
    python -c \"import numpy as np; x=np.loadtxt('{input}'); x=(x-x.mean())/x.std(); np.savetxt('{output}', x)\"
    """

rule train_model:
  input:
    "results/zscored_trace.txt"
  output:
    accuracy="results/model_accuracy.txt",
    precision="results/model_precision.txt"
  conda:
    "envs/sklearn.yaml"
  shell:
    """
    mkdir -p results
    python -c \"import numpy as np; from sklearn.linear_model import LogisticRegression; 
    from sklearn.model_selection import train_test_split; from sklearn.metrics import accuracy_score, precision_score; 
    x=np.loadtxt('{input}').reshape(-1, 1); y=(x.flatten() > 0).astype(int); 
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2); 
    model=LogisticRegression().fit(x_train, y_train); y_pred = model.predict(x_test); 
    acc=accuracy_score(y_test, y_pred); prec=precision_score(y_test, y_pred); 
    open('{output.accuracy}', 'w').write(f'{acc:.2f}'); open('{output.precision}', 'w').write(f'{prec:.2f}')\"
    """